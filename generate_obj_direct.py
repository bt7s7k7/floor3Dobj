import json
import numpy as np
import os
from FloorplanToBlenderLib import (
    IO,
    config,
    const,
    execution,
    dialog,
    floorplan,
)

"""
Direct OBJ Generator - No Blender Required
This script generates OBJ files directly from floorplan data without using Blender.
"""

class OBJGenerator:
    def __init__(self):
        self.vertices = []
        self.faces = []
        self.materials = []
        self.vertex_count = 1  # OBJ files start vertex indices at 1
        
    def add_vertices(self, verts):
        """Add vertices to the OBJ and return starting index"""
        start_index = self.vertex_count
        for vert in verts:
            self.vertices.append(f"v {vert[0]:.6f} {vert[1]:.6f} {vert[2]:.6f}")
            self.vertex_count += 1
        return start_index
    
    def add_face(self, face_indices, material_name="default"):
        """Add a face to the OBJ"""
        face_str = "f " + " ".join([str(i) for i in face_indices])
        self.faces.append(f"usemtl {material_name}")
        self.faces.append(face_str)
    
    def add_material(self, name, color=(0.8, 0.8, 0.8)):
        """Add a material definition"""
        if name not in self.materials:
            self.materials.append({
                'name': name,
                'color': color
            })
    
    def create_mesh_from_data(self, verts, faces, material_name="default", color=(0.8, 0.8, 0.8), offset_z=0.0):
        """Create mesh from vertex and face data"""
        if not verts or not faces:
            return
            
        # Add material
        self.add_material(material_name, color)
        
        # Offset vertices in Z if needed
        if offset_z != 0.0:
            verts = [[v[0], v[1], v[2] + offset_z] for v in verts]
        
        # Add vertices and get starting index
        start_index = self.add_vertices(verts)
        
        # Add faces
        for face in faces:
            if isinstance(face, list) and len(face) >= 3:
                # Convert to 1-based indices and add to start_index
                face_indices = [i + start_index for i in face]
                self.add_face(face_indices, material_name)
    
    def save_obj(self, obj_path):
        """Save OBJ file"""
        with open(obj_path, 'w') as f:
            f.write("# Generated by FloorplanToBlender3d - Direct OBJ Export\n")
            f.write(f"mtllib {os.path.basename(obj_path).replace('.obj', '.mtl')}\n\n")
            
            # Write vertices
            for vertex in self.vertices:
                f.write(vertex + "\n")
            f.write("\n")
            
            # Write faces
            for face in self.faces:
                f.write(face + "\n")
    
    def save_mtl(self, mtl_path):
        """Save MTL material file"""
        with open(mtl_path, 'w') as f:
            f.write("# Generated by FloorplanToBlender3d - Direct OBJ Export\n\n")
            
            for material in self.materials:
                f.write(f"newmtl {material['name']}\n")
                f.write("Ns 225.000000\n")
                f.write("Ka 1.000000 1.000000 1.000000\n")
                color = material['color']
                f.write(f"Kd {color[0]:.6f} {color[1]:.6f} {color[2]:.6f}\n")
                f.write(f"Ks 0.500000 0.500000 0.500000\n")
                f.write("Ke 0.000000 0.000000 0.000000\n")
                f.write("Ni 1.450000\n")
                f.write("d 1.000000\n")
                f.write("illum 2\n\n")

def read_from_file(file_path):
    """Read JSON data from file"""
    try:
        with open(file_path + ".txt", "r") as f:
            return json.loads(f.read())
    except:
        return None

def create_3d_model_direct(data_path, output_path):
    """Create 3D model directly without Blender"""
    
    obj_gen = OBJGenerator()
    
    # Read transform data
    transform_file = os.path.join(data_path, "transform.txt")
    if os.path.exists(transform_file):
        with open(transform_file, 'r') as f:
            transform = json.loads(f.read())
        origin_path = transform.get("origin_path", data_path)
        # If origin_path is relative, make it relative to current directory
        if not os.path.isabs(origin_path):
            origin_path = os.path.join(".", origin_path)
    else:
        origin_path = data_path
    
    print(f"Reading data from: {origin_path}")
    
    # Create Floor (lowest level)
    floor_verts = read_from_file(os.path.join(origin_path, "floor_verts"))
    floor_faces = read_from_file(os.path.join(origin_path, "floor_faces"))
    
    if floor_verts and floor_faces:
        print(f"Adding floor with {len(floor_verts)} vertices")
        obj_gen.create_mesh_from_data(
            floor_verts, [floor_faces], 
            "floor", (0.6, 0.6, 0.6), 
            offset_z=-0.01  # Floor slightly down
        )
    
    # Create Rooms (slightly above floor)
    room_verts = read_from_file(os.path.join(origin_path, "room_verts"))
    room_faces = read_from_file(os.path.join(origin_path, "room_faces"))
    
    if room_verts and room_faces:
        print(f"Adding {len(room_verts)} rooms")
        for i, (rverts, rfaces) in enumerate(zip(room_verts, room_faces)):
            obj_gen.create_mesh_from_data(
                rverts, rfaces, 
                f"room_{i}", (0.9, 0.9, 0.7), 
                offset_z=0.005  # Rooms slightly up from floor
            )
    
    # Create Walls
    # Vertical walls
    wall_v_verts = read_from_file(os.path.join(origin_path, "wall_vertical_verts"))
    wall_v_faces = read_from_file(os.path.join(origin_path, "wall_vertical_faces"))
    
    if wall_v_verts and wall_v_faces:
        print(f"Adding {len(wall_v_verts)} vertical wall groups")
        for i, walls in enumerate(wall_v_verts):
            for j, wall in enumerate(walls):
                obj_gen.create_mesh_from_data(
                    wall, wall_v_faces, 
                    "wall", (0.8, 0.8, 0.8)
                )
    
    # Horizontal walls
    wall_h_verts = read_from_file(os.path.join(origin_path, "wall_horizontal_verts"))
    wall_h_faces = read_from_file(os.path.join(origin_path, "wall_horizontal_faces"))
    
    if wall_h_verts and wall_h_faces:
        print(f"Adding {len(wall_h_verts)} horizontal walls")
        for i, (wverts, wfaces) in enumerate(zip(wall_h_verts, wall_h_faces)):
            obj_gen.create_mesh_from_data(
                wverts, wfaces, 
                "wall", (0.8, 0.8, 0.8)
            )
    
    # Skip Windows and Doors - they create unwanted boxes
    print("Skipping windows and doors to create cleaner model")
    
    # Save files
    obj_path = output_path
    mtl_path = output_path.replace('.obj', '.mtl')
    
    obj_gen.save_obj(obj_path)
    obj_gen.save_mtl(mtl_path)
    
    print(f"3D Model created at: {obj_path}")
    print(f"Materials created at: {mtl_path}")
    print(f"Total vertices: {obj_gen.vertex_count - 1}")
    print(f"Total materials: {len(obj_gen.materials)}")

def main():
    """Main function - generate 3D model without Blender"""
    dialog.figlet()
    
    print("----- CREATE 3D MODEL FROM FLOORPLAN (NO BLENDER) -----")
    print("Welcome! This version generates OBJ files directly without Blender.")
    print()
    
    # Get image path
    image_path = input(f"Enter path to floorplan image [default = Images/Examples/example2.png]: ")
    if not image_path:
        image_path = "Images/Examples/example2.png"
    
    # Check if image exists
    if not os.path.exists(image_path):
        print(f"Error: Image {image_path} not found!")
        return
    
    # Get output path
    output_path = input("Enter output path for OBJ file [default = Target/floorplan_direct.obj]: ")
    if not output_path:
        output_path = "Target/floorplan_direct.obj"
    
    # Ensure target directory exists
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    
    print("\nProcessing floorplan...")
    
    # Generate data files (this part still needs the FloorplanToBlenderLib)
    config_path = "./Configs/default.ini"
    
    # Update config to use selected image
    if os.path.exists(config_path):
        # Read current config
        import configparser
        conf = configparser.ConfigParser()
        conf.read(config_path)
        
        # Update image path
        if 'IMAGE' not in conf:
            conf.add_section('IMAGE')
        conf.set('IMAGE', 'image_path', f'"{image_path}"')
        
        # Write back
        with open(config_path, 'w') as configfile:
            conf.write(configfile)
    
    # Create floorplan object
    fp = floorplan.new_floorplan(config_path)
    
    # Generate data files
    print("Generating data files...")
    IO.clean_data_folder("Data")
    data_path = execution.simple_single(fp)
    
    # Create 3D model directly
    print("Creating 3D model...")
    create_3d_model_direct(data_path, output_path)
    
    print("\nDone! ðŸŽ‰")
    print("FloorplanToBlender3d (Direct Mode) - No Blender Required")

if __name__ == "__main__":
    main()
